
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000778  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000778  00000778  000007cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  0000077c  0000077c  000007d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000798  00000798  000007ec  2**2
                  ALLOC
  4 .debug_abbrev 00000249  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a36  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006e1  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000280  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000013f  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000271  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000008c  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000323  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000256b  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 7c 	calli 2bc <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 a0 	ori gp,gp,0x7a0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 98 	ori r1,r1,0x798
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 1c 	ori r3,r3,0x81c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"



int main()
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
gpio_init(0xFF);
 218:	34 01 00 ff 	mvi r1,255
 21c:	f8 00 00 a4 	calli 4ac <gpio_init>
	pararspi(0x00);
	char a = sbyte1();
	gpio_write(a);
	primero(a);
	
	if ((a) >= 0x10)
 220:	34 0c 00 0f 	mvi r12,15
	primero(a);
	segundo(b);
	gpio_write(a);
	//uart_putchar(a);
	*/
	sdir1(0x80);
 224:	34 01 00 80 	mvi r1,128
 228:	f8 00 01 18 	calli 688 <sdir1>
	sdir2(0xE6);
 22c:	34 01 00 e6 	mvi r1,230
 230:	f8 00 01 1f 	calli 6ac <sdir2>
	sdir3(0x01);
 234:	34 01 00 01 	mvi r1,1
 238:	f8 00 01 26 	calli 6d0 <sdir3>
	sdir4(0x02);
 23c:	34 01 00 02 	mvi r1,2
 240:	f8 00 01 2d 	calli 6f4 <sdir4>
	escribirspi(0x01);
 244:	34 01 00 01 	mvi r1,1
 248:	f8 00 01 34 	calli 718 <escribirspi>
	pararspi(0x00);
 24c:	34 01 00 00 	mvi r1,0
 250:	f8 00 01 3b 	calli 73c <pararspi>
	char a = sbyte1();
 254:	f8 00 01 01 	calli 658 <sbyte1>
 258:	b8 20 58 00 	mv r11,r1
	gpio_write(a);
 25c:	f8 00 00 9e 	calli 4d4 <gpio_write>
	primero(a);
 260:	b9 60 08 00 	mv r1,r11
 264:	f8 00 00 f1 	calli 628 <primero>
	gpio_write(a);
	primero(a);
	}
	else 
	{
	timbre(0x01);
 268:	34 01 00 01 	mvi r1,1
	pararspi(0x00);
	char a = sbyte1();
	gpio_write(a);
	primero(a);
	
	if ((a) >= 0x10)
 26c:	51 8b 00 02 	bgeu r12,r11,274 <main+0x6c>
	{
	timbre(0x00);
 270:	34 01 00 00 	mvi r1,0
	gpio_write(a);
	primero(a);
	}
	else 
	{
	timbre(0x01);
 274:	f8 00 01 3b 	calli 760 <timbre>
	gpio_write(a);
 278:	b9 60 08 00 	mv r1,r11
 27c:	f8 00 00 96 	calli 4d4 <gpio_write>
	primero(a);
 280:	b9 60 08 00 	mv r1,r11
 284:	f8 00 00 e9 	calli 628 <primero>
 288:	e3 ff ff e7 	bi 224 <main+0x1c>

0000028c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 28c:	c3 a0 00 00 	ret

00000290 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 290:	78 01 00 00 	mvhi r1,0x0
 294:	38 21 08 18 	ori r1,r1,0x818
 298:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 29c:	78 02 00 00 	mvhi r2,0x0
 2a0:	38 42 07 80 	ori r2,r2,0x780
 2a4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2a8:	34 63 00 01 	addi r3,r3,1
 2ac:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2b0:	34 01 00 0e 	mvi r1,14
 2b4:	58 41 00 00 	sw (r2+0),r1
}
 2b8:	c3 a0 00 00 	ret

000002bc <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2bc:	37 9c ff f0 	addi sp,sp,-16
 2c0:	5b 8b 00 10 	sw (sp+16),r11
 2c4:	5b 8c 00 0c 	sw (sp+12),r12
 2c8:	5b 8d 00 08 	sw (sp+8),r13
 2cc:	5b 9d 00 04 	sw (sp+4),ra
 2d0:	78 0b 00 00 	mvhi r11,0x0
 2d4:	39 6b 07 98 	ori r11,r11,0x798
 2d8:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2dc:	35 6d 00 80 	addi r13,r11,128
 2e0:	e0 00 00 04 	bi 2f0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2e4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2e8:	45 6d 00 08 	be r11,r13,308 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2ec:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2f0:	21 81 00 01 	andi r1,r12,0x1
 2f4:	44 20 ff fc 	be r1,r0,2e4 <irq_handler+0x28>
 2f8:	29 61 00 00 	lw r1,(r11+0)
 2fc:	35 6b 00 04 	addi r11,r11,4
 300:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 304:	5d 6d ff fa 	bne r11,r13,2ec <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 308:	2b 9d 00 04 	lw ra,(sp+4)
 30c:	2b 8b 00 10 	lw r11,(sp+16)
 310:	2b 8c 00 0c 	lw r12,(sp+12)
 314:	2b 8d 00 08 	lw r13,(sp+8)
 318:	37 9c 00 10 	addi sp,sp,16
 31c:	c3 a0 00 00 	ret

00000320 <isr_init>:

void isr_init()
{
 320:	78 01 00 00 	mvhi r1,0x0
 324:	78 02 00 00 	mvhi r2,0x0
 328:	38 21 07 98 	ori r1,r1,0x798
 32c:	38 42 02 8c 	ori r2,r2,0x28c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 330:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 334:	58 22 00 00 	sw (r1+0),r2
 338:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 33c:	5c 23 ff fe 	bne r1,r3,334 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 340:	c3 a0 00 00 	ret

00000344 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 344:	78 03 00 00 	mvhi r3,0x0
 348:	3c 21 00 02 	sli r1,r1,2
 34c:	38 63 07 98 	ori r3,r3,0x798
 350:	b4 61 18 00 	add r3,r3,r1
 354:	58 62 00 00 	sw (r3+0),r2
}
 358:	c3 a0 00 00 	ret

0000035c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 35c:	78 03 00 00 	mvhi r3,0x0
 360:	3c 21 00 02 	sli r1,r1,2
 364:	38 63 07 98 	ori r3,r3,0x798
 368:	78 02 00 00 	mvhi r2,0x0
 36c:	b4 61 18 00 	add r3,r3,r1
 370:	38 42 02 8c 	ori r2,r2,0x28c
 374:	58 62 00 00 	sw (r3+0),r2
}
 378:	c3 a0 00 00 	ret

0000037c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 37c:	78 04 00 00 	mvhi r4,0x0
 380:	38 84 07 78 	ori r4,r4,0x778
 384:	28 83 00 00 	lw r3,(r4+0)
 388:	78 02 00 00 	mvhi r2,0x0
 38c:	38 42 07 80 	ori r2,r2,0x780
 390:	28 42 00 00 	lw r2,(r2+0)
 394:	88 23 08 00 	mul r1,r1,r3
 398:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 39c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3a0:	34 01 00 08 	mvi r1,8
 3a4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3a8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3ac:	20 21 00 01 	andi r1,r1,0x1
 3b0:	44 20 ff fe 	be r1,r0,3a8 <msleep+0x2c>
}
 3b4:	c3 a0 00 00 	ret

000003b8 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3b8:	78 02 00 00 	mvhi r2,0x0
 3bc:	38 42 07 80 	ori r2,r2,0x780
 3c0:	28 42 00 00 	lw r2,(r2+0)
 3c4:	08 21 00 64 	muli r1,r1,100
 3c8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3cc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3d0:	34 01 00 08 	mvi r1,8
 3d4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3d8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3dc:	20 21 00 01 	andi r1,r1,0x1
 3e0:	44 20 ff fe 	be r1,r0,3d8 <nsleep+0x20>
}
 3e4:	c3 a0 00 00 	ret

000003e8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3e8:	78 01 00 00 	mvhi r1,0x0
 3ec:	38 21 07 80 	ori r1,r1,0x780
 3f0:	28 23 00 00 	lw r3,(r1+0)
 3f4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3f8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3fc:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 400:	38 21 08 18 	ori r1,r1,0x818

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 404:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 408:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 40c:	78 02 00 00 	mvhi r2,0x0
 410:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 414:	34 04 00 0e 	mvi r4,14
 418:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 41c:	38 21 07 98 	ori r1,r1,0x798
 420:	38 42 02 90 	ori r2,r2,0x290
 424:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 428:	c3 a0 00 00 	ret

0000042c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 42c:	c3 a0 00 00 	ret

00000430 <uart_getchar>:

char uart_getchar()
{   
 430:	78 01 00 00 	mvhi r1,0x0
 434:	38 21 07 7c 	ori r1,r1,0x77c
 438:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;//espera un dato 
 43c:	28 41 00 00 	lw r1,(r2+0)
 440:	20 21 00 01 	andi r1,r1,0x1
 444:	44 20 ff fe 	be r1,r0,43c <uart_getchar+0xc>
	return uart0->rxtx; // retorna un caracter
 448:	28 41 00 04 	lw r1,(r2+4)
}
 44c:	20 21 00 ff 	andi r1,r1,0xff
 450:	c3 a0 00 00 	ret

00000454 <uart_putchar>:

void uart_putchar(char c)
{
 454:	78 02 00 00 	mvhi r2,0x0
 458:	38 42 07 7c 	ori r2,r2,0x77c
 45c:	28 43 00 00 	lw r3,(r2+0)
 460:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;// si esta ocupado no manda nada 
 464:	28 62 00 00 	lw r2,(r3+0)
 468:	20 42 00 10 	andi r2,r2,0x10
 46c:	5c 40 ff fe 	bne r2,r0,464 <uart_putchar+0x10>
	uart0->rxtx = c;
 470:	58 61 00 04 	sw (r3+4),r1
}
 474:	c3 a0 00 00 	ret

00000478 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 478:	40 24 00 00 	lbu r4,(r1+0)
 47c:	44 80 00 0b 	be r4,r0,4a8 <uart_putstr+0x30>
 480:	78 02 00 00 	mvhi r2,0x0
 484:	38 42 07 7c 	ori r2,r2,0x77c
 488:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx; // retorna un caracter
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;// si esta ocupado no manda nada 
 48c:	28 62 00 00 	lw r2,(r3+0)
 490:	20 42 00 10 	andi r2,r2,0x10
 494:	5c 40 ff fe 	bne r2,r0,48c <uart_putstr+0x14>
	uart0->rxtx = c;
 498:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 49c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4a0:	40 24 00 00 	lbu r4,(r1+0)
 4a4:	5c 82 ff fa 	bne r4,r2,48c <uart_putstr+0x14>
 4a8:	c3 a0 00 00 	ret

000004ac <gpio_init>:
}
/***************************************************************************
  GPIO Functions*/
void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 4ac:	78 02 00 00 	mvhi r2,0x0
 4b0:	38 42 07 84 	ori r2,r2,0x784
 4b4:	28 42 00 00 	lw r2,(r2+0)
 4b8:	58 41 00 08 	sw (r2+8),r1
}
 4bc:	c3 a0 00 00 	ret

000004c0 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 4c0:	78 01 00 00 	mvhi r1,0x0
 4c4:	38 21 07 84 	ori r1,r1,0x784
 4c8:	28 21 00 00 	lw r1,(r1+0)
 4cc:	28 21 00 00 	lw r1,(r1+0)
}
 4d0:	c3 a0 00 00 	ret

000004d4 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 4d4:	78 02 00 00 	mvhi r2,0x0
 4d8:	38 42 07 84 	ori r2,r2,0x784
 4dc:	28 42 00 00 	lw r2,(r2+0)
 4e0:	58 41 00 04 	sw (r2+4),r1
}
 4e4:	c3 a0 00 00 	ret

000004e8 <canal>:
/****************************************************************************
  I2C Functions */

void canal(char can)
{ 
 4e8:	78 02 00 00 	mvhi r2,0x0
 4ec:	38 42 07 8c 	ori r2,r2,0x78c
 4f0:	28 43 00 00 	lw r3,(r2+0)
 4f4:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 4f8:	34 04 00 01 	mvi r4,1
 4fc:	28 62 00 00 	lw r2,(r3+0)
 500:	44 44 ff ff 	be r2,r4,4fc <canal+0x14>
	i2c0->CAM=can;
 504:	58 61 00 0c 	sw (r3+12),r1
	i2c0->CAL=0x83;
 508:	34 01 00 83 	mvi r1,131
 50c:	58 61 00 10 	sw (r3+16),r1
					
}
 510:	c3 a0 00 00 	ret

00000514 <direccion>:

void direccion(char dir)
{
 514:	78 02 00 00 	mvhi r2,0x0
 518:	38 42 07 8c 	ori r2,r2,0x78c
 51c:	28 43 00 00 	lw r3,(r2+0)
 520:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 524:	34 04 00 01 	mvi r4,1
 528:	28 62 00 00 	lw r2,(r3+0)
 52c:	44 44 ff ff 	be r2,r4,528 <direccion+0x14>
	i2c0->AD1=dir;			
 530:	58 61 00 14 	sw (r3+20),r1
}
 534:	c3 a0 00 00 	ret

00000538 <direccion2>:

void direccion2(char dir2)
{
 538:	78 02 00 00 	mvhi r2,0x0
 53c:	38 42 07 8c 	ori r2,r2,0x78c
 540:	28 43 00 00 	lw r3,(r2+0)
 544:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 548:	34 04 00 01 	mvi r4,1
 54c:	28 62 00 00 	lw r2,(r3+0)
 550:	44 44 ff ff 	be r2,r4,54c <direccion2+0x14>
	i2c0->AD2=dir2;
 554:	58 61 00 18 	sw (r3+24),r1
			
}
 558:	c3 a0 00 00 	ret

0000055c <direccion3>:

void direccion3(char dir3)
{
 55c:	78 02 00 00 	mvhi r2,0x0
 560:	38 42 07 8c 	ori r2,r2,0x78c
 564:	28 43 00 00 	lw r3,(r2+0)
 568:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 56c:	34 04 00 01 	mvi r4,1
 570:	28 62 00 00 	lw r2,(r3+0)
 574:	44 44 ff ff 	be r2,r4,570 <direccion3+0x14>
	i2c0->AD3=dir3;			
 578:	58 61 00 1c 	sw (r3+28),r1
}
 57c:	c3 a0 00 00 	ret

00000580 <escribiri2c>:

void escribiri2c(char ctr)
{
 580:	78 02 00 00 	mvhi r2,0x0
 584:	38 42 07 8c 	ori r2,r2,0x78c
 588:	28 43 00 00 	lw r3,(r2+0)
 58c:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 590:	34 04 00 01 	mvi r4,1
 594:	28 62 00 00 	lw r2,(r3+0)
 598:	44 44 ff ff 	be r2,r4,594 <escribiri2c+0x14>
	i2c0->writei2c=ctr;			
 59c:	58 61 00 20 	sw (r3+32),r1
}
 5a0:	c3 a0 00 00 	ret

000005a4 <parari2c>:

void parari2c(char ctr2)
{
 5a4:	78 02 00 00 	mvhi r2,0x0
 5a8:	38 42 07 8c 	ori r2,r2,0x78c
 5ac:	28 43 00 00 	lw r3,(r2+0)
 5b0:	20 21 00 ff 	andi r1,r1,0xff
        while((i2c0->busy)==0x01);
 5b4:	34 04 00 01 	mvi r4,1
 5b8:	28 62 00 00 	lw r2,(r3+0)
 5bc:	44 44 ff ff 	be r2,r4,5b8 <parari2c+0x14>
	i2c0->stopi2c=ctr2;			
 5c0:	58 61 00 24 	sw (r3+36),r1
}
 5c4:	c3 a0 00 00 	ret

000005c8 <byte1>:

char byte1(){
	return i2c0->A0M;
 5c8:	78 01 00 00 	mvhi r1,0x0
 5cc:	38 21 07 8c 	ori r1,r1,0x78c
 5d0:	28 21 00 00 	lw r1,(r1+0)
 5d4:	28 21 00 04 	lw r1,(r1+4)
}
 5d8:	20 21 00 ff 	andi r1,r1,0xff
 5dc:	c3 a0 00 00 	ret

000005e0 <byte2>:
char byte2()
{
	return i2c0->A0L;
 5e0:	78 01 00 00 	mvhi r1,0x0
 5e4:	38 21 07 8c 	ori r1,r1,0x78c
 5e8:	28 21 00 00 	lw r1,(r1+0)
 5ec:	28 21 00 08 	lw r1,(r1+8)
}
 5f0:	20 21 00 ff 	andi r1,r1,0xff
 5f4:	c3 a0 00 00 	ret

000005f8 <byte10>:



char byte10()
{
	return disp0->A0MR;
 5f8:	78 01 00 00 	mvhi r1,0x0
 5fc:	38 21 07 90 	ori r1,r1,0x790
 600:	28 21 00 00 	lw r1,(r1+0)
 604:	28 21 00 00 	lw r1,(r1+0)
}
 608:	20 21 00 ff 	andi r1,r1,0xff
 60c:	c3 a0 00 00 	ret

00000610 <byte20>:

char byte20()
{
	return disp0->A0LR;
 610:	78 01 00 00 	mvhi r1,0x0
 614:	38 21 07 90 	ori r1,r1,0x790
 618:	28 21 00 00 	lw r1,(r1+0)
 61c:	28 21 00 04 	lw r1,(r1+4)
}
 620:	20 21 00 ff 	andi r1,r1,0xff
 624:	c3 a0 00 00 	ret

00000628 <primero>:


void primero (char lec1)
{
	disp0->A0MW=lec1;
 628:	78 02 00 00 	mvhi r2,0x0
 62c:	38 42 07 90 	ori r2,r2,0x790
 630:	28 42 00 00 	lw r2,(r2+0)
	return disp0->A0LR;
}


void primero (char lec1)
{
 634:	20 21 00 ff 	andi r1,r1,0xff
	disp0->A0MW=lec1;
 638:	58 41 00 08 	sw (r2+8),r1
}
 63c:	c3 a0 00 00 	ret

00000640 <segundo>:

void segundo (char lec2)
{
	disp0->A0LW=lec2;
 640:	78 02 00 00 	mvhi r2,0x0
 644:	38 42 07 90 	ori r2,r2,0x790
 648:	28 42 00 00 	lw r2,(r2+0)
{
	disp0->A0MW=lec1;
}

void segundo (char lec2)
{
 64c:	20 21 00 ff 	andi r1,r1,0xff
	disp0->A0LW=lec2;
 650:	58 41 00 0c 	sw (r2+12),r1
}
 654:	c3 a0 00 00 	ret

00000658 <sbyte1>:
/****************************************************************************
  SPI Functions */

char sbyte1()
{
	return spi0->BYTEM;
 658:	78 01 00 00 	mvhi r1,0x0
 65c:	38 21 07 88 	ori r1,r1,0x788
 660:	28 21 00 00 	lw r1,(r1+0)
 664:	28 21 00 04 	lw r1,(r1+4)
}
 668:	20 21 00 ff 	andi r1,r1,0xff
 66c:	c3 a0 00 00 	ret

00000670 <sbyte2>:

char sbyte2()
{
	return spi0->BYTEL;
 670:	78 01 00 00 	mvhi r1,0x0
 674:	38 21 07 88 	ori r1,r1,0x788
 678:	28 21 00 00 	lw r1,(r1+0)
 67c:	28 21 00 08 	lw r1,(r1+8)
}
 680:	20 21 00 ff 	andi r1,r1,0xff
 684:	c3 a0 00 00 	ret

00000688 <sdir1>:

void sdir1(char spi1)
{
 688:	78 02 00 00 	mvhi r2,0x0
 68c:	38 42 07 88 	ori r2,r2,0x788
 690:	28 43 00 00 	lw r3,(r2+0)
 694:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 698:	34 04 00 01 	mvi r4,1
 69c:	28 62 00 00 	lw r2,(r3+0)
 6a0:	44 44 ff ff 	be r2,r4,69c <sdir1+0x14>
	spi0->CDIR1=spi1;			
 6a4:	58 61 00 0c 	sw (r3+12),r1
}
 6a8:	c3 a0 00 00 	ret

000006ac <sdir2>:

void sdir2(char spi2)
{
 6ac:	78 02 00 00 	mvhi r2,0x0
 6b0:	38 42 07 88 	ori r2,r2,0x788
 6b4:	28 43 00 00 	lw r3,(r2+0)
 6b8:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 6bc:	34 04 00 01 	mvi r4,1
 6c0:	28 62 00 00 	lw r2,(r3+0)
 6c4:	44 44 ff ff 	be r2,r4,6c0 <sdir2+0x14>
	spi0->CDIR2=spi2;			
 6c8:	58 61 00 10 	sw (r3+16),r1
}
 6cc:	c3 a0 00 00 	ret

000006d0 <sdir3>:

void sdir3(char spi3)
{
 6d0:	78 02 00 00 	mvhi r2,0x0
 6d4:	38 42 07 88 	ori r2,r2,0x788
 6d8:	28 43 00 00 	lw r3,(r2+0)
 6dc:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 6e0:	34 04 00 01 	mvi r4,1
 6e4:	28 62 00 00 	lw r2,(r3+0)
 6e8:	44 44 ff ff 	be r2,r4,6e4 <sdir3+0x14>
	spi0->CDIR3=spi3;			
 6ec:	58 61 00 14 	sw (r3+20),r1
}
 6f0:	c3 a0 00 00 	ret

000006f4 <sdir4>:

void sdir4(char spi4)
{
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	38 42 07 88 	ori r2,r2,0x788
 6fc:	28 43 00 00 	lw r3,(r2+0)
 700:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 704:	34 04 00 01 	mvi r4,1
 708:	28 62 00 00 	lw r2,(r3+0)
 70c:	44 44 ff ff 	be r2,r4,708 <sdir4+0x14>
	spi0->CDIR4=spi4;			
 710:	58 61 00 18 	sw (r3+24),r1
}
 714:	c3 a0 00 00 	ret

00000718 <escribirspi>:

void escribirspi(char ctrl1)
{
 718:	78 02 00 00 	mvhi r2,0x0
 71c:	38 42 07 88 	ori r2,r2,0x788
 720:	28 43 00 00 	lw r3,(r2+0)
 724:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 728:	34 04 00 01 	mvi r4,1
 72c:	28 62 00 00 	lw r2,(r3+0)
 730:	44 44 ff ff 	be r2,r4,72c <escribirspi+0x14>
	spi0->writespi=ctrl1;			
 734:	58 61 00 1c 	sw (r3+28),r1
}
 738:	c3 a0 00 00 	ret

0000073c <pararspi>:

void pararspi(char ctrl2)
{
 73c:	78 02 00 00 	mvhi r2,0x0
 740:	38 42 07 88 	ori r2,r2,0x788
 744:	28 43 00 00 	lw r3,(r2+0)
 748:	20 21 00 ff 	andi r1,r1,0xff
        while((spi0->sbusy)==0x01);
 74c:	34 04 00 01 	mvi r4,1
 750:	28 62 00 00 	lw r2,(r3+0)
 754:	44 44 ff ff 	be r2,r4,750 <pararspi+0x14>
	spi0->stopspi=ctrl2;			
 758:	58 61 00 20 	sw (r3+32),r1
}
 75c:	c3 a0 00 00 	ret

00000760 <timbre>:
  Sound Functions */

void timbre(char tbr)
{
     
	sound0->SoundWrite=tbr;			
 760:	78 02 00 00 	mvhi r2,0x0
 764:	38 42 07 94 	ori r2,r2,0x794
 768:	28 42 00 00 	lw r2,(r2+0)

/****************************************************************************
  Sound Functions */

void timbre(char tbr)
{
 76c:	20 21 00 ff 	andi r1,r1,0xff
     
	sound0->SoundWrite=tbr;			
 770:	58 41 00 04 	sw (r2+4),r1
}
 774:	c3 a0 00 00 	ret
